// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  // output   = "../generated/prisma"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String
  bio       String?
  createdAt DateTime @default(now())

  posts  Post[]
  Upvote Upvote[]
  comments Comments[]
}

model Post {
  id          String   @id @default(cuid())
  title       String
  content     String
  isDeleted   Boolean  @default(false)
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Author      User?    @relation(fields: [authorId], references: [id])
  authorId    String?

  Upvote      Upvote[]
  Comments Comments[]
  PostImages PostImages[]
}

model PostImages {
  id     String @id @default(cuid())
  postId String
  Post Post @relation(fields: [postId], references: [id])
  
}

model Upvote {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  post   Post   @relation(fields: [postId], references: [id])
  postId String
  userId String
  createdAt DateTime @default(now())
}

model Comments {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  post   Post   @relation(fields: [postId], references: [id])
  postId String
  userId String
  createdAt DateTime @default(now())

}
